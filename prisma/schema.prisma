generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  //
  email         String    @unique
  password      String
  profile       Profile?
  //relations
  posts         Post[]    @relation("author")
  comments      Comment[] @relation("commentAuthor")
  likedPosts    Post[]    @relation("likedPosts")
  likedComments Comment[] @relation("likedComments")
  following     Follow[]  @relation("following")
  followedBy    Follow[]  @relation("followed")
}

model Follow {
  id          Int  @id @default(autoincrement())
  //relations
  following   User @relation("following", fields: [followingId], references: [id])
  followed    User @relation("followed", fields: [followedId], references: [id])
  followingId Int
  followedId  Int
}

model Profile {
  id        Int     @id @default(autoincrement())
  //
  username  String  @unique
  name      String?
  pfp       String?
  biography String?
  siteUrl   String?
  location  String?
  //relations
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}

model Post {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  //
  text         String?
  imageUrl     String?
  videoUrl     String?
  tags         String?
  commentaries Comment[]
  //relations
  author       User      @relation(name: "author", fields: [authorId], references: [id])
  authorId     Int
  likedBy      User[]    @relation(name: "likedPosts")
  visibility   Int       @default(0)
}

model Comment {
  id        Int      @id @default(autoincrement())
  //
  text      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  //relations
  likedBy   User[]   @relation(name: "likedComments")
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  author    User     @relation(name: "commentAuthor", fields: [authorId], references: [id])
  authorId  Int
}
